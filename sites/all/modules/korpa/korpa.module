<?php

/**
 * @file
 * Korpa module file.
 */

require_once dirname(__FILE__) . '/korpa.theme.inc';

/**
 * Implements hook_permission().
 */
function korpa_permission() {
  return array(
    'upravlja korpom' => array(
      'title' => t('Upravljanje korpom'),
      'description' => t('Administrira korpom.'),
    ),
    'pregled korpe' => array(
      'title' => t('Pregled korpe'),
      'description' => t('Pregled proizvoda u korpi.'),
    ),
    'korišćenje korpe' => array(
      'title' => t('Korišćenje korpe'),
      'description' => t('Korišćenje korpe.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function korpa_menu() {
  $items = array();

  $items['admin/config/korpa'] = array(
    'title' => 'Korpa',
    'description' => 'Podešavanje korpe.',
    'position' => 'left',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('upravlja korpom'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/korpa/settings'] = array(
    'title' => 'Korpa',
    'description' => 'Podešavanje korpe.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('korpa_admin_content_type'),
    'access arguments' => array('upravlja korpom'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'korpa.admin.inc',
  );
  
  $items['admin/config/korpa/settings/settings'] = array(
    'title' => 'Podešavanje',
    'description' => 'Podešavanje korpe.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('korpa_admin_content_type'),
    'access arguments' => array('upravlja korpom'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'korpa.admin.inc',
    'weight' => 5,
  );
  
  $items['cart'] = array(
    'title' => 'Vaša korpa',
    'description' => 'Strana za prikazivanje sadržaja korpe.',
    'page callback' => 'korpa_cart',
    'access arguments' => array('korišćenje korpe'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
    'file' => 'korpa.korpa.inc',
  );

  $items['cart/add'] = array(
    'title' => 'Add to cart',
    'description' => 'Add to cart url.',
    'page callback' => 'korpa_add_to_cart',
    'access arguments' => array('korišćenje korpe'),
    'type' => MENU_CALLBACK,
    'file' => 'korpa.korpa.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function korpa_theme() {
  return array(
    'korpa_cart_total_price' => array(
      'variables' => array('price' => NULL),
    ),
    'korpa_price' => array(
      'function' => 'korpa_price',
      'variables' => array('price' => NULL),
    ),
    'korpa_add_to_cart' => array(
      'function' => 'korpa_add_to_cart_button',
      'variables' => array('path' => NULL, 'css_class' => NULL),
    ),
    'korpa_cart_flat' => array(
      'template' => 'korpa_cart_flat',
      'variables' => array('cart' => NULL, 'price' => NULL, 'vat' => NULL),
    ),
    'korpa_render_cart_element' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function korpa_field_formatter_info() {
  $info = array(
    'korpa_add_to_cart_quantity' => array(
      'label' => t('Dugme dodaj u korpu sa količinom'),
      'field types' => array('text'),
      'description' => t('Dodaje dugme dodaj u korpu sa količinom.'),
    ),
    'korpa_price' => array(
      'label' => t('Fromat koji definiše modul korpa'),
      'field types' => array('number_decimal'),
      'description' => t('Format koji je definisan preko modula korpa.'),
    ),
  );
  return $info;
}

/**
* Implements hook_field_formatter_view().
*/
function korpa_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  
  $element = array();
  $settings = $display['settings'];
  
  switch ($display['type']) {
    case 'korpa_add_to_cart_quantity':
      $element = drupal_get_form('korpa_add_to_cart_quantity_form', $entity->nid);
      break;

    case 'korpa_price':
      foreach ($items as $delta => $item) {
        $value = $item['value'].' '.variable_get('korpa_currency');
        $element[$delta] = array(
          '#markup' => theme('korpa_price', array('price' => $value)),
        );
      }
      break;
  }
  
  return $element;
}

/**
 * Add to cart with quantity form.
 */
function korpa_add_to_cart_quantity_form($form, &$form_state, $nid = NULL) {
  $form = array();
  
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $nid,
  );

  $form['quantity'] = array(
    '#type' => 'textfield',
    '#title' => t('Količina:'),
    '#default_value' => '1',
    '#size' => 1,
  );

  $form['submit'] = array(
    '#type' => 'button',
    '#value' => t('Dodaj u korpu'),
    '#ajax'=>array(
      'callback'=>'ajax_callback',
      'wrapper'=>'replace_fieldset_div',
      'progress'=>array(
        'type'=>'none',
      ),
    ),
  );
  
  $form['poruka'] = array(
    '#type' => 'markup',
    '#prefix'=>'<div id="replace_fieldset_div">',
    '#suffix'=>'</div>',
  );
  
  if(!empty($form_state['values']['quantity'])){
    korpa_add_to_cart($form_state['values']['nid'], $form_state['values']['quantity']);
    $form['poruka']['#markup'] = t('Uspešno ste dodali proizvod u korpu!');
  }
  if(user_is_logged_in()){
    return $form;
  }
}

function ajax_callback($form, $form_state){
  return $form['poruka'];
}

/**
 * Helper function. Returns an array of korpa product (content) types.
 */ 
function korpa_product_types(){
  static $types;
  
  if (empty($types)) {
    $types = variable_get('korpa_content_types', array());
  }
    
  return $types;
}

/**
 * Implements template_preprocess_field().
 * 
 * Stupid fix for having drupal take into consideration the value returned by 
 * basic_cart_field_formatter_view() for formatting the "Add to cart" button.
 * 
 * Without this fix, the button doesn't appear, since there is no value for it.
 */
function korpa_preprocess_field(&$variables, $hook) {
  $field = $variables['element'];
  if ($field['#field_name'] == 'add_to_cart') {
    $variables['items'][] = $field[0];
  }
}

/**
 * Helper function. Returns true if given node (node object or string node type) is a product.
 */
function korpa_is_product($node) {
  $type = is_object($node) ? $node->type : $node;
  // Getting node types.
  $node_types = korpa_product_types();
  if (empty($node_types) || !is_array($node_types)) {
    return FALSE;
  }
  return in_array($type, $node_types);
}

/**
 * Implements hook_form_alter().
 * 
 * Used for removing the add to cart text field from the node/add or node/edit form.
 */
function korpa_form_alter(&$form, &$form_state, $form_id) {
  $types = korpa_product_types();
  
  if (!empty($types) && is_array($types)) {
    $types_ = array();
    foreach ($types as $value) {
      $types_[] = $value . '_node_form';
    }
    
    // Check if we are on a product content type.
    if (in_array($form_id, $types_)) {
      // We are - hiding the add to cart field.
      unset($form['add_to_cart']);
    }
  }
}

/**
 * Returns the fields we need to create.
 * 
 * @return mixed
 *   Key / Value pair of field name => field type. 
 */
function korpa_get_fields() {
  return array(
    'price' => array(
      'type' => 'number_decimal',
      'title' => t('Price'),
      'description' => t('Cena koja je definisana modulom korpa.'),
    ),
    'add_to_cart' => array(
      'type' => 'text',
      'title' => 'Dodaj u korpu',
      'description' => '',
    ),
  );
}
